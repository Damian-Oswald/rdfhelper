% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sparql.R
\name{sparql}
\alias{sparql}
\title{Execute a SPARQL query against a remote endpoint and get the results}
\usage{
sparql(query, endpoint)
}
\arguments{
\item{query}{A single string containing a valid SPARQL query.  Make sure to
include any necessary PREFIX declarations.}

\item{endpoint}{A string giving the full URL of the SPARQL HTTP endpoint
(e.g. \code{"https://lindas.admin.ch/query"}).}
}
\value{
A single-length character vector holding the CSV-formatted results.
To convert to a data frame, you can do:
\verb{r raw_csv <- sparql(q, endpoint) df <- readr::read_csv(raw_csv, show_col_types = FALSE) }
}
\description{
Sends a SPARQL \code{SELECT} (or other) query to the specified SPARQL HTTP endpoint,
requests the results in CSV format, and returns them as a character string.
You can then parse the CSV (e.g. with \strong{readr}’s \code{read_csv()}) into a data frame
for further processing.
}
\details{
\itemize{
\item The function uses \strong{httr}’s \code{POST()} under the hood, setting \code{Accept: text/csv}
so that the endpoint returns CSV.
\item Messages from the underlying CSV parser (if you choose to pipe into \code{read_csv()})
are suppressed by \code{suppressMessages()}.
\item If you’d rather get a parsed data frame directly, wrap the call in
\code{readr::read_csv(..., show_col_types = FALSE)}.
}
}
\examples{
# build your query string, e.g.:
query <- '
PREFIX : <https://agriculture.ld.admin.ch/plant-protection/>
PREFIX schema: <http://schema.org/>
SELECT ?name ?wNumber (COUNT(?hCode) AS ?hazards) WHERE {
  ?p a :Product ;
    schema:name ?name ;
    :federalAdmissionNumber ?wNumber ;
    :hasHazardStatement ?hCode .
}
GROUP BY ?name ?wNumber
ORDER BY DESC(?hazards)
'

# run it
sparql(query, "https://lindas.admin.ch/query")

}
\seealso{
\itemize{
\item \code{\link[httr:POST]{httr::POST()}}, \code{\link[httr:content]{httr::content()}} for low-level HTTP
\item \code{\link[readr:read_delim]{readr::read_csv()}} for parsing CSV into a data.frame/tibble
}
}
